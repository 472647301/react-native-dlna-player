/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {useRef, useState, useEffect} from 'react';
import {StyleSheet, Text, View, TouchableOpacity} from 'react-native';
import {startService, ByronPlayer} from '@byron-react-native/dlna-player';
import {ByronEmitter, dlnaEventName} from '@byron-react-native/dlna-player';
import Slider from '@react-native-community/slider';

const url = 'http://vfx.mtime.cn/Video/2019/02/04/mp4/190204084208765161.mp4';

const App = () => {
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [paused, setPaused] = useState(false);
  const [seek, setSeek] = useState(0);
  const viewRef = useRef(null);

  const onStart = event => {
    console.log(' >> onStart:', event);
    setDuration(event.duration);
  };
  const onError = () => {
    console.log(' >> onError');
  };
  const onBuffer = () => {
    console.log(' >> onBuffer');
  };
  const onPaused = bool => {
    console.log(' >> onPaused:', bool);
  };
  const onProgress = event => {
    console.log(' >> onProgress:', event);
    if (seek) setSeek(0);
    setCurrentTime(event.currentTime);
  };
  const onEnd = () => {
    console.log(' >> onEnd');
  };
  const onSwitch = () => {
    console.log(' >> onSwitch');
  };
  const onSlidingComplete = val => {
    setSeek(val);
    viewRef.current?.setNativeProps({
      seek: val,
    });
  };
  const nowTime = currentTime ? getDurationTime(currentTime / 1000) : '--';
  const totalTime = duration ? getDurationTime(duration / 1000) : '--';
  return (
    <View style={styles.container}>
      <Text style={styles.welcome}>☆RNByronDLNA example☆</Text>
      <ByronPlayer
        source={{uri: url}}
        onStart={onStart}
        onError={onError}
        onBuffer={onBuffer}
        onPaused={onPaused}
        onProgress={onProgress}
        onEnd={onEnd}
        onSwitch={onSwitch}
        style={{height: 240, marginVertical: 10}}
        paused={paused}
        ref={viewRef}
      />
      <View style={styles.time}>
        <Text>
          {totalTime.h
            ? `${totalTime.h}:${totalTime.m}:${totalTime.s}`
            : `${totalTime.m}:${totalTime.s}`}
        </Text>
        <Text style={{color: 'red', marginHorizontal: 10}}>/</Text>
        <Text style={{color: 'blue', width: 100}}>
          {nowTime.h
            ? `${nowTime.h}:${nowTime.m}:${nowTime.s}`
            : `${nowTime.m}:${nowTime.s}`}
        </Text>
      </View>
      <TouchableOpacity
        onPress={() => setPaused(!paused)}
        style={[styles.btn, {backgroundColor: paused ? 'red' : 'blue'}]}>
        <Text style={{color: '#fff'}}>{paused ? '已暂停' : '播放中'}</Text>
      </TouchableOpacity>
      {duration ? (
        <Slider
          minimumValue={1 / duration}
          maximumValue={1}
          value={seek ? seek : currentTime ? currentTime / duration : seek}
          minimumTrackTintColor={'blue'}
          maximumTrackTintColor="grey"
          onSlidingComplete={onSlidingComplete}
          onValueChange={setSeek}
          thumbTintColor={'red'}
          style={styles.silder}
        />
      ) : null}
    </View>
  );
};

function getDurationTime(time) {
  const h = Math.floor(time / 3600);
  const m = Math.floor((time / 60) % 60);
  const s = Math.floor(time % 60);

  return {h, m: m < 10 ? '0' + m : m, s: s < 10 ? '0' + s : s};
}

export default App;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  time: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 10,
  },
  silder: {
    width: 200,
    height: 30,
    marginVertical: 10,
  },
  btn: {
    width: 120,
    height: 36,
    borderRadius: 18,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 10,
  },
});
