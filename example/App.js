/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, {useRef, useState, useEffect} from 'react';
import {StyleSheet, Text, View, TouchableOpacity} from 'react-native';
import {
  startService,
  ByronPlayer,
  EventType,
} from '@byron-react-native/dlna-player';
import {ByronEmitter, dlnaEventName} from '@byron-react-native/dlna-player';
import Slider from '@react-native-community/slider';
import {Dimensions} from 'react-native';

const {width} = Dimensions.get('window');

const url = 'http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8';

const App = () => {
  const [uri, setUri] = useState(url);
  const [paused, setPaused] = useState(false);
  const [position, setPosition] = useState(0);
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const isSlider = useRef(false);
  const ref = useRef();

  useEffect(() => {
    startService('@byron-react-native/dlna-player');
    ByronEmitter.addListener(dlnaEventName, info => {
      if (info.url) {
        setUri(info.url);
      }
    });
  }, []);

  const onPlaying = data => {
    if (data.duration) {
      setDuration(data.duration);
    }
    setTimeout(() => {
      ref.current?.setNativeProps({time: 300 * 1000});
    }, 8000);
  };

  const onProgress = data => {
    if (data.currentTime) {
      setCurrentTime(data.currentTime);
    }
    if (data.position && !isSlider.current) {
      setPosition(data.position);
    }
  };

  const onSlidingComplete = val => {
    // ref.current?.setNativeProps({position: val});
    setTimeout(() => {
      isSlider.current = false;
    }, 2000);
  };

  const nowTime = currentTime ? getDurationTime(currentTime / 1000) : '--';
  const totalTime = duration ? getDurationTime(duration / 1000) : '--';

  return (
    <View style={styles.container}>
      <Text style={styles.welcome}>☆RNByronDLNA example☆</Text>
      <ByronPlayer
        source={{uri}}
        paused={paused}
        style={{height: 240}}
        onProgress={onProgress}
        onPlaying={onPlaying}
        ref={ref}
      />
      <View style={styles.time}>
        <Text>{totalTime}</Text>
        <Text style={{color: 'red', marginHorizontal: 10}}>/</Text>
        <Text style={{color: 'blue', width: 100}}>{nowTime}</Text>
      </View>
      <TouchableOpacity
        onPress={() => setPaused(!paused)}
        style={[styles.btn, {backgroundColor: paused ? 'red' : 'blue'}]}>
        <Text style={{color: '#fff'}}>{paused ? '已暂停' : '播放中'}</Text>
      </TouchableOpacity>
      <Slider
        minimumValue={0}
        maximumValue={1}
        value={position}
        minimumTrackTintColor={'blue'}
        maximumTrackTintColor="grey"
        thumbTintColor={'red'}
        style={styles.silder}
        onSlidingComplete={onSlidingComplete}
        onSlidingStart={() => (isSlider.current = true)}
      />
    </View>
  );
};

function getDurationTime(time) {
  const h = Math.floor(time / 3600);
  const m = Math.floor((time / 60) % 60);
  const s = Math.floor(time % 60);
  const hh = h ? h + ':' : '';
  const mm = m < 10 ? '0' + m : m;
  const ss = s < 10 ? '0' + s : s;
  return `${hh}${mm}:${ss}`;
}

export default App;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  time: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 10,
  },
  silder: {
    width: 200,
    height: 30,
    marginVertical: 10,
  },
  btn: {
    width: 120,
    height: 36,
    borderRadius: 18,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 10,
  },
});
